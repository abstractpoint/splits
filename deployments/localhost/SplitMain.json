{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wethAddress_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "splitAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "splitHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint32[]",
          "name": "percentAllocations",
          "type": "uint32[]"
        }
      ],
      "name": "CreateSplit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "splitAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DistributeSplit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "name": "TransferETH",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PERCENTAGE_SCALE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "claimBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint32[]",
          "name": "percentAllocations",
          "type": "uint32[]"
        }
      ],
      "name": "createSplit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "split",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint32[]",
          "name": "percentAllocations",
          "type": "uint32[]"
        }
      ],
      "name": "distributeSplitBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "split",
          "type": "address"
        }
      ],
      "name": "receiveSplitFunds",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "scaledPercent",
          "type": "uint256"
        }
      ],
      "name": "scaleAmountByPercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "scaledAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "splitHashes",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb0bba8ff50774cdd53d87493fa1f9b8b8b67107b913a5f3a18f21bf290dc5b1a",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "1285442",
    "logsBloom": "0x
    "blockHash": "0xa3e771bb4efc5a6ecffb1c60f0d8a891dd8dd54bb422b436dbdddaee618e9e29",
    "transactionHash": "0xb0bba8ff50774cdd53d87493fa1f9b8b8b67107b913a5f3a18f21bf290dc5b1a",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "1285442",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xc778417e063141139fce010982780140aa0cd5ab"
  ],
  "solcInputHash": "d2c3e00cf8c5bca7f4248897970e47da",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wethAddress_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"splitAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"splitHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint32[]\",\"name\":\"percentAllocations\",\"type\":\"uint32[]\"}],\"name\":\"CreateSplit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"splitAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DistributeSplit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"TransferETH\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PERCENTAGE_SCALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint32[]\",\"name\":\"percentAllocations\",\"type\":\"uint32[]\"}],\"name\":\"createSplit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"split\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint32[]\",\"name\":\"percentAllocations\",\"type\":\"uint32[]\"}],\"name\":\"distributeSplitBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"split\",\"type\":\"address\"}],\"name\":\"receiveSplitFunds\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"scaledPercent\",\"type\":\"uint256\"}],\"name\":\"scaleAmountByPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"scaledAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"splitHashes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"WAC\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SplitMain\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SplitMain.sol\":\"SplitMain\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/SplitMain.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.4;\\n\\ninterface IERC20 {\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n}\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint256 value) external returns (bool);\\n}\\n\\n/**\\n * @title SplitMain\\n * @author WAC\\n */\\ncontract SplitMain {\\n    uint256 public constant PERCENTAGE_SCALE = 10e5;\\n    address internal wethAddress;\\n    mapping(address => uint) public balances;\\n    mapping(address => bytes32) public splitHashes;\\n\\n    // The CreateSplit event is emitted after each successful split creation.\\n    event CreateSplit(\\n                      address indexed splitAddress,\\n                      bytes32 indexed splitHash,\\n                      address[] accounts,\\n                      uint32[] percentAllocations\\n                      );\\n\\n    // The DistributeSplit event is emitted after each successful split distribution.\\n    event DistributeSplit(\\n                          address indexed splitAddress,\\n                          uint256 amount\\n                          );\\n\\n    // The TransferETH event is emitted after each eth transfer to an account is attempted.\\n    event TransferETH(\\n                      // The account to which the transfer was attempted.\\n                      address indexed account,\\n                      // The amount for transfer that was attempted.\\n                      uint256 amount,\\n                      // Whether or not the transfer succeeded.\\n                      bool success\\n                      );\\n\\n    constructor(address wethAddress_) {\\n        wethAddress = wethAddress_;\\n    }\\n\\n    // TODO: use uint256 for percentAllocations?\\n    function createSplit(\\n                         address[] calldata accounts,\\n                         uint32[] calldata percentAllocations\\n                         ) external {\\n        require(accounts.length == percentAllocations.length, \\\"Mismatched accounts & allocations array lengths\\\");\\n        // TODO: do we need to check that e.g. percentAllocations adds up to 100? yes, could be used to extract funds\\n        // TODO: do we need to check that e.g. percentAllocations are all non-negative? no, overflow in check that sums up to 100 should be triggered if negative allocations used\\n        // TODO: should we cap split size?\\n        bytes32 splitHash = hashSplit(accounts, percentAllocations);\\n        address splitAddress = address(uint160(bytes20(splitHash)));\\n        splitHashes[splitAddress] = splitHash;\\n        emit CreateSplit(splitAddress, splitHash, accounts, percentAllocations);\\n    }\\n\\n    function receiveSplitFunds(\\n                                address split\\n                                ) external payable {\\n        balances[split] += msg.value;\\n    }\\n\\n    function distributeSplitBalance(\\n                        address split,\\n                        address[] calldata accounts,\\n                        uint32[] calldata percentAllocations\\n                        ) external {\\n        require(splitHashes[split] != 0, \\\"Invalid split\\\");\\n        // TODO: is this, or any other checks, necessary (for extra hash collision resistance)?\\n        require(accounts.length == percentAllocations.length, \\\"Mismatched accounts & allocations array lengths\\\");\\n        require(verifyHash(accounts, percentAllocations, splitHashes[split]), \\\"Invalid split\\\");\\n        uint toDistribute = balances[split];\\n        balances[split] = 0;\\n        // TODO: pay distributor\\n        for(uint i=0; i < accounts.length; i++) {\\n            // TODO: amountFromPercent or scaleAmountByPercentage?\\n            balances[accounts[i]] += scaleAmountByPercentage(toDistribute, percentAllocations[i]);\\n        }\\n        emit DistributeSplit(split, toDistribute);\\n    }\\n\\n    function claimBalance(address account) external {\\n        // ensure address isn't split\\n        require(splitHashes[account] == 0, \\\"Splits cannot be claimed\\\");\\n        uint claimableFunds = balances[account];\\n        balances[account] = 0;\\n        transferETHOrWETH(account, claimableFunds);\\n        // TODO: add mutable distribution fee, if msg.sender != account\\n    }\\n\\n    function scaleAmountByPercentage(uint256 amount, uint256 scaledPercent)\\n        public\\n        pure\\n        returns (uint256 scaledAmount)\\n    {\\n        /*\\n          Example:\\n          If there is 100 ETH in the account, and someone has \\n          an allocation of 2%, we call this with 100 as the amount, and 2*10e3\\n          as the scaled percent.\\n\\n          To find out the amount we use, for example: (100 * 2*10e3) / (10e5)\\n          which returns 2 -- i.e. 2% of the 100 ETH balance.\\n        */\\n        scaledAmount = (amount * scaledPercent) / (PERCENTAGE_SCALE);\\n    }\\n\\n    //======== Private Functions ========\\n\\n    function amountFromPercent(uint256 amount, uint32 percent)\\n        private\\n        pure\\n        returns (uint256)\\n    {\\n        // Solidity 0.8.0 lets us do this without SafeMath.\\n        return (amount * percent) / 100;\\n    }\\n\\n    // Will attempt to transfer ETH, but will transfer WETH instead if it fails.\\n    function transferETHOrWETH(address to, uint256 value)\\n        private\\n        returns (bool didSucceed)\\n    {\\n        // Try to transfer ETH to the given recipient.\\n        didSucceed = attemptETHTransfer(to, value);\\n        if (!didSucceed) {\\n            // If the transfer fails, wrap and send as WETH, so that\\n            // the auction is not impeded and the recipient still\\n            // can claim ETH via the WETH contract (similar to escrow).\\n            IWETH(wethAddress).deposit{value: value}();\\n            IWETH(wethAddress).transfer(to, value);\\n            // At this point, the recipient can unwrap WETH.\\n        }\\n\\n        emit TransferETH(to, value, didSucceed);\\n    }\\n\\n    function attemptETHTransfer(address to, uint256 value)\\n        private\\n        returns (bool)\\n    {\\n        // Here increase the gas limit a reasonable amount above the default, and try\\n        // to send ETH to the recipient.\\n        // NOTE: This might allow the recipient to attempt a limited reentrancy attack.\\n        (bool success, ) = to.call{value: value, gas: 30000}(\\\"\\\");\\n        return success;\\n    }\\n\\n    function verifyHash(\\n                        address[] calldata accounts,\\n                        uint32[] calldata percentAllocations,\\n                        bytes32 hash\\n                        ) private pure returns (bool) {\\n        bytes32 computedHash = hashSplit(accounts, percentAllocations);\\n        return computedHash == hash;\\n    }\\n\\n    function hashSplit(\\n                       address[] calldata accounts,\\n                       uint32[] calldata percentAllocations\\n                       ) private pure returns (bytes32 computedHash) {\\n        // TODO: does encodePacked move the data to memory? can this be avoided when hashing?\\n        // TODO: abi.encode vs abi.encodePacked? is there any collision worries w the latter?\\n        bytes32 accountsHash = keccak256(abi.encodePacked(accounts));\\n        bytes32 percentAllocationsHash = keccak256(abi.encodePacked(percentAllocations));\\n        computedHash = keccak256(abi.encodePacked(accountsHash, percentAllocationsHash));\\n    }\\n}\\n\",\"keccak256\":\"0x9903f2a9a88a898b254ef6bfadd9ba9783bb76a3ee050ca29a31f4aa91e5f3b2\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061007b5760003560e01c80638ffb5c971161004e5780638ffb5c971461014e578063af0b2f1d1461018b578063b633e4cd146101a7578063e40dcfe3146101d05761007b565b806327e235e3146100805780633f26479e146100bd5780635dcc9ec7146100e85780638a5891a014610125575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a29190610bcf565b6101f9565b6040516100b491906111c5565b60405180910390f35b3480156100c957600080fd5b506100d2610211565b6040516100df91906111c5565b60405180910390f35b3480156100f457600080fd5b5061010f600480360381019061010a9190610bcf565b610218565b60405161011c919061114a565b60405180910390f35b34801561013157600080fd5b5061014c60048036038101906101479190610bf8565b610230565b005b34801561015a57600080fd5b5061017560048036038101906101709190610d1f565b610588565b60405161018291906111c5565b60405180910390f35b6101a560048036038101906101a09190610bcf565b6105ac565b005b3480156101b357600080fd5b506101ce60048036038101906101c99190610bcf565b610605565b005b3480156101dc57600080fd5b506101f760048036038101906101f29190610c81565b610721565b005b60016020528060005260406000206000915090505481565b620f424081565b60026020528060005260406000206000915090505481565b6000801b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414156102b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ac90611185565b60405180910390fd5b8181905084849050146102fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102f4906111a5565b60405180910390fd5b61034984848484600260008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610822565b610388576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037f90611185565b60405180910390fd5b6000600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060005b858590508110156105315761047c8285858481811061045c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906104719190610d5b565b63ffffffff16610588565b600160008888858181106104b9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906104ce9190610bcf565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461051791906112b9565b925050819055508080610529906113fc565b915050610414565b508573ffffffffffffffffffffffffffffffffffffffff167f9a14fb76ae6d133b646a7594e7ee7ee26624ca291606a83cab10d86c653e155c8260405161057891906111c5565b60405180910390a2505050505050565b6000620f4240828461059a9190611340565b6105a4919061130f565b905092915050565b34600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105fb91906112b9565b9250508190555050565b6000801b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414610689576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068090611165565b60405180910390fd5b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061071c8282610842565b505050565b818190508484905014610769576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610760906111a5565b60405180910390fd5b6000610777858585856109db565b905060008160601c905081600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550818173ffffffffffffffffffffffffffffffffffffffff167f7b2cd4844121a8a815695052fe5153b5bf62c3d6894f027241b2808ab77d127288888888604051610812949392919061110f565b60405180910390a3505050505050565b600080610831878787876109db565b905082811491505095945050505050565b600061084e8383610a6b565b9050806109855760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b1580156108bd57600080fd5b505af11580156108d1573d6000803e3d6000fd5b505050505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84846040518363ffffffff1660e01b81526004016109319291906110e6565b602060405180830381600087803b15801561094b57600080fd5b505af115801561095f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109839190610cf6565b505b8273ffffffffffffffffffffffffffffffffffffffff167fdbd5389f52533f4cbd998e752125a5a4eaa0b813b399ad15f775ec0e8438620d83836040516109cd9291906111e0565b60405180910390a292915050565b60008085856040516020016109f1929190611073565b60405160208183030381529060405280519060200120905060008484604051602001610a1e92919061108c565b6040516020818303038152906040528051906020012090508181604051602001610a499291906110a5565b6040516020818303038152906040528051906020012092505050949350505050565b6000808373ffffffffffffffffffffffffffffffffffffffff168361753090604051610a96906110d1565b600060405180830381858888f193505050503d8060008114610ad4576040519150601f19603f3d011682016040523d82523d6000602084013e610ad9565b606091505b505090508091505092915050565b600081359050610af681611551565b92915050565b60008083601f840112610b0e57600080fd5b8235905067ffffffffffffffff811115610b2757600080fd5b602083019150836020820283011115610b3f57600080fd5b9250929050565b60008083601f840112610b5857600080fd5b8235905067ffffffffffffffff811115610b7157600080fd5b602083019150836020820283011115610b8957600080fd5b9250929050565b600081519050610b9f81611568565b92915050565b600081359050610bb48161157f565b92915050565b600081359050610bc981611596565b92915050565b600060208284031215610be157600080fd5b6000610bef84828501610ae7565b91505092915050565b600080600080600060608688031215610c1057600080fd5b6000610c1e88828901610ae7565b955050602086013567ffffffffffffffff811115610c3b57600080fd5b610c4788828901610afc565b9450945050604086013567ffffffffffffffff811115610c6657600080fd5b610c7288828901610b46565b92509250509295509295909350565b60008060008060408587031215610c9757600080fd5b600085013567ffffffffffffffff811115610cb157600080fd5b610cbd87828801610afc565b9450945050602085013567ffffffffffffffff811115610cdc57600080fd5b610ce887828801610b46565b925092505092959194509250565b600060208284031215610d0857600080fd5b6000610d1684828501610b90565b91505092915050565b60008060408385031215610d3257600080fd5b6000610d4085828601610ba5565b9250506020610d5185828601610ba5565b9150509250929050565b600060208284031215610d6d57600080fd5b6000610d7b84828501610bba565b91505092915050565b6000610d908383610de4565b60208301905092915050565b6000610da88383610e02565b60208301905092915050565b6000610dc08383611055565b60208301905092915050565b6000610dd88383611064565b60208301905092915050565b610ded8161139a565b82525050565b610dfc8161139a565b82525050565b610e0b8161139a565b82525050565b6000610e1d8385611237565b9350610e2882611209565b8060005b85811015610e6157610e3e828461128b565b610e488882610d84565b9750610e538361121d565b925050600181019050610e2c565b5085925050509392505050565b6000610e7a8385611248565b9350610e8582611209565b8060005b85811015610ebe57610e9b828461128b565b610ea58882610d9c565b9750610eb08361121d565b925050600181019050610e89565b5085925050509392505050565b6000610ed78385611253565b9350610ee282611213565b8060005b85811015610f1b57610ef882846112a2565b610f028882610db4565b9750610f0d8361122a565b925050600181019050610ee6565b5085925050509392505050565b6000610f348385611264565b9350610f3f82611213565b8060005b85811015610f7857610f5582846112a2565b610f5f8882610dcc565b9750610f6a8361122a565b925050600181019050610f43565b5085925050509392505050565b610f8e816113ac565b82525050565b610f9d816113b8565b82525050565b610fb4610faf826113b8565b611445565b82525050565b6000610fc760188361127a565b9150610fd2826114ad565b602082019050919050565b6000610fea600d8361127a565b9150610ff5826114d6565b602082019050919050565b600061100d60008361126f565b9150611018826114ff565b600082019050919050565b6000611030602f8361127a565b915061103b82611502565b604082019050919050565b61104f816113e2565b82525050565b61105e816113ec565b82525050565b61106d816113ec565b82525050565b6000611080828486610e6e565b91508190509392505050565b6000611099828486610f28565b91508190509392505050565b60006110b18285610fa3565b6020820191506110c18284610fa3565b6020820191508190509392505050565b60006110dc82611000565b9150819050919050565b60006040820190506110fb6000830185610df3565b6111086020830184611046565b9392505050565b6000604082019050818103600083015261112a818688610e11565b9050818103602083015261113f818486610ecb565b905095945050505050565b600060208201905061115f6000830184610f94565b92915050565b6000602082019050818103600083015261117e81610fba565b9050919050565b6000602082019050818103600083015261119e81610fdd565b9050919050565b600060208201905081810360008301526111be81611023565b9050919050565b60006020820190506111da6000830184611046565b92915050565b60006040820190506111f56000830185611046565b6112026020830184610f85565b9392505050565b6000819050919050565b6000819050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600081905092915050565b600082825260208201905092915050565b600061129a6020840184610ae7565b905092915050565b60006112b16020840184610bba565b905092915050565b60006112c4826113e2565b91506112cf836113e2565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156113045761130361144f565b5b828201905092915050565b600061131a826113e2565b9150611325836113e2565b9250826113355761133461147e565b5b828204905092915050565b600061134b826113e2565b9150611356836113e2565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561138f5761138e61144f565b5b828202905092915050565b60006113a5826113c2565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b6000611407826113e2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561143a5761143961144f565b5b600182019050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f53706c6974732063616e6e6f7420626520636c61696d65640000000000000000600082015250565b7f496e76616c69642073706c697400000000000000000000000000000000000000600082015250565b50565b7f4d69736d617463686564206163636f756e7473202620616c6c6f636174696f6e60008201527f73206172726179206c656e677468730000000000000000000000000000000000602082015250565b61155a8161139a565b811461156557600080fd5b50565b611571816113ac565b811461157c57600080fd5b50565b611588816113e2565b811461159357600080fd5b50565b61159f816113ec565b81146115aa57600080fd5b5056fea264697066735822122028455c030a587b8f3e3f40a55ad36d861207bd89786ad90e047b707403ae1fc964736f6c63430008040033",
  "devdoc": {
    "author": "WAC",
    "kind": "dev",
    "methods": {},
    "title": "SplitMain",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 37,
        "contract": "contracts/SplitMain.sol:SplitMain",
        "label": "wethAddress",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 41,
        "contract": "contracts/SplitMain.sol:SplitMain",
        "label": "balances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 45,
        "contract": "contracts/SplitMain.sol:SplitMain",
        "label": "splitHashes",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bytes32)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}